// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PriceQuationApi.Model;

namespace PriceQuationApi.Migrations
{
    [DbContext(typeof(PriceQuationContext))]
    [Migration("20210320051709_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = "sadmin",
                            RoleId = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("PriceQuationApi.Model.AdminRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleDesc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AdminRole");

                    b.HasData(
                        new
                        {
                            Id = "SuperAdmin",
                            ConcurrencyStamp = "ConcurrencyStamp",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            RoleDesc = "超級管理員"
                        },
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "ConcurrencyStamp",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            RoleDesc = "系統管理員"
                        });
                });

            modelBuilder.Entity("PriceQuationApi.Model.AdminUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AdminUser");

                    b.HasData(
                        new
                        {
                            Id = "sadmin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ConcurrencyStamp",
                            DepartmentId = "營業",
                            Email = "sadmin@hcmfgroup.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SADMIN@HCMFGROUP.COM",
                            NormalizedUserName = "SADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOtRfNDmY3fKqd9iqJINpOVUiLz8JFKzKEz/Xt46A/eIfMdpdMjueu4xYIYFRncnXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SecurityStamp",
                            TwoFactorEnabled = false,
                            UserName = "sadmin"
                        });
                });

            modelBuilder.Entity("PriceQuationApi.Model.Bom", b =>
                {
                    b.Property<string>("AssemblyPartNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AllFinishTime")
                        .HasColumnType("Date");

                    b.Property<string>("AssemblyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssemblyNameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssemblyRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("Date");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("Date");

                    b.Property<string>("OppoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AssemblyPartNumber");

                    b.HasIndex("OppoId");

                    b.ToTable("Bom");
                });

            modelBuilder.Entity("PriceQuationApi.Model.BomItem", b =>
                {
                    b.Property<string>("BomItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssemblyPartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeworOld")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldCarType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartLevel")
                        .HasColumnType("int");

                    b.Property<string>("PartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartName_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingNo1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingNo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingNo3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingNo4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingRule1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingRule2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingRule3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutingRule4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThicknessWire")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BomItemId");

                    b.HasIndex("AssemblyPartNumber");

                    b.ToTable("BomItem");
                });

            modelBuilder.Entity("PriceQuationApi.Model.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentId = "營業",
                            Code = "HQ3200"
                        },
                        new
                        {
                            DepartmentId = "採購",
                            Code = "HQ2110"
                        },
                        new
                        {
                            DepartmentId = "工機-模具",
                            Code = "HQ8100"
                        },
                        new
                        {
                            DepartmentId = "工機-設備",
                            Code = "HQ8200"
                        },
                        new
                        {
                            DepartmentId = "工機-量檢具",
                            Code = "HQ8140"
                        },
                        new
                        {
                            DepartmentId = "工機-夾治具",
                            Code = "HQ8130"
                        },
                        new
                        {
                            DepartmentId = "試驗課",
                            Code = "HQ4100"
                        },
                        new
                        {
                            DepartmentId = "生管",
                            Code = "HQ5100"
                        },
                        new
                        {
                            DepartmentId = "設計",
                            Code = "HQ4000"
                        },
                        new
                        {
                            DepartmentId = "成本課",
                            Code = "HQ3330"
                        },
                        new
                        {
                            DepartmentId = "ME",
                            Code = "HQ4910"
                        });
                });

            modelBuilder.Entity("PriceQuationApi.Model.FixtureItem", b =>
                {
                    b.Property<string>("FixtureItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssemblyPartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DepartemntId")
                        .HasColumnType("int");

                    b.Property<string>("EngineeringName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineeringOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EquipmentQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EquipmentRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EquipmentTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EquipmentUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FixtureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FixtureQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FixtureRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FixtureTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FixtureUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("NeedEquipment")
                        .HasColumnType("bit");

                    b.Property<bool?>("NeedFixture")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Share")
                        .HasColumnType("bit");

                    b.HasKey("FixtureItemId");

                    b.HasIndex("AssemblyPartNumber");

                    b.ToTable("FixtureItem");
                });

            modelBuilder.Entity("PriceQuationApi.Model.MeasuringItem", b =>
                {
                    b.Property<string>("MeasuringItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssemblyPartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DepartemntId")
                        .HasColumnType("int");

                    b.Property<string>("MeasuringName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasuringRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MeasuringTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MeasuringTotalRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MeasuringUnitFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("NeedMeausring")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MeasuringItemId");

                    b.HasIndex("AssemblyPartNumber");

                    b.ToTable("MeasuringItem");
                });

            modelBuilder.Entity("PriceQuationApi.Model.Oppo", b =>
                {
                    b.Property<string>("OppoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("OppoId");

                    b.ToTable("Oppo");
                });

            modelBuilder.Entity("PriceQuationApi.Model.QuoteDetail", b =>
                {
                    b.Property<int>("QuoteDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AssemblyPartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("FinishedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuoteItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("QuoteTime")
                        .HasColumnType("Date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("QuoteDetailId");

                    b.HasIndex("AssemblyPartNumber");

                    b.ToTable("QuoteDetail");
                });

            modelBuilder.Entity("PriceQuationApi.Model.QuoteItem", b =>
                {
                    b.Property<int>("QuoteItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DepartemntId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponsibleItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuoteItemId");

                    b.HasIndex("DepartemntId");

                    b.ToTable("QuoteItem");

                    b.HasData(
                        new
                        {
                            QuoteItemId = 1,
                            DepartemntId = "工機-模具",
                            ResponsibleItem = "自製件"
                        },
                        new
                        {
                            QuoteItemId = 2,
                            DepartemntId = "採購",
                            ResponsibleItem = "外包件"
                        },
                        new
                        {
                            QuoteItemId = 3,
                            DepartemntId = "成本課",
                            ResponsibleItem = "延用件"
                        },
                        new
                        {
                            QuoteItemId = 4,
                            DepartemntId = "營業",
                            ResponsibleItem = "進口件"
                        },
                        new
                        {
                            QuoteItemId = 5,
                            DepartemntId = "工機-量檢具",
                            ResponsibleItem = "量檢具費"
                        },
                        new
                        {
                            QuoteItemId = 6,
                            DepartemntId = "工機-夾治具",
                            ResponsibleItem = "夾治具費"
                        },
                        new
                        {
                            QuoteItemId = 7,
                            DepartemntId = "工機-設備",
                            ResponsibleItem = "設備費"
                        },
                        new
                        {
                            QuoteItemId = 8,
                            DepartemntId = "營業",
                            ResponsibleItem = "總成組立費"
                        },
                        new
                        {
                            QuoteItemId = 9,
                            DepartemntId = "生管",
                            ResponsibleItem = "包裝&運輸費"
                        },
                        new
                        {
                            QuoteItemId = 10,
                            DepartemntId = "採購",
                            ResponsibleItem = "打樣費"
                        },
                        new
                        {
                            QuoteItemId = 11,
                            DepartemntId = "試驗課",
                            ResponsibleItem = "試驗費"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PriceQuationApi.Model.AdminRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PriceQuationApi.Model.AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PriceQuationApi.Model.AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PriceQuationApi.Model.AdminRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceQuationApi.Model.AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PriceQuationApi.Model.AdminUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PriceQuationApi.Model.AdminUser", b =>
                {
                    b.HasOne("PriceQuationApi.Model.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PriceQuationApi.Model.Bom", b =>
                {
                    b.HasOne("PriceQuationApi.Model.Oppo", "Oppo")
                        .WithMany("Boms")
                        .HasForeignKey("OppoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oppo");
                });

            modelBuilder.Entity("PriceQuationApi.Model.BomItem", b =>
                {
                    b.HasOne("PriceQuationApi.Model.Bom", "Bom")
                        .WithMany("BomItems")
                        .HasForeignKey("AssemblyPartNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bom");
                });

            modelBuilder.Entity("PriceQuationApi.Model.FixtureItem", b =>
                {
                    b.HasOne("PriceQuationApi.Model.Bom", "Bom")
                        .WithMany("FixtureItems")
                        .HasForeignKey("AssemblyPartNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bom");
                });

            modelBuilder.Entity("PriceQuationApi.Model.MeasuringItem", b =>
                {
                    b.HasOne("PriceQuationApi.Model.Bom", "Bom")
                        .WithMany("MeasuringItems")
                        .HasForeignKey("AssemblyPartNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bom");
                });

            modelBuilder.Entity("PriceQuationApi.Model.QuoteDetail", b =>
                {
                    b.HasOne("PriceQuationApi.Model.Bom", "Bom")
                        .WithMany("QuoteDetails")
                        .HasForeignKey("AssemblyPartNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bom");
                });

            modelBuilder.Entity("PriceQuationApi.Model.QuoteItem", b =>
                {
                    b.HasOne("PriceQuationApi.Model.Department", "Department")
                        .WithMany("QuoteItems")
                        .HasForeignKey("DepartemntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PriceQuationApi.Model.Bom", b =>
                {
                    b.Navigation("BomItems");

                    b.Navigation("FixtureItems");

                    b.Navigation("MeasuringItems");

                    b.Navigation("QuoteDetails");
                });

            modelBuilder.Entity("PriceQuationApi.Model.Department", b =>
                {
                    b.Navigation("QuoteItems");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PriceQuationApi.Model.Oppo", b =>
                {
                    b.Navigation("Boms");
                });
#pragma warning restore 612, 618
        }
    }
}
